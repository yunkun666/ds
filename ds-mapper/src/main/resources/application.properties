#==============================taskExecutor==============================
#当一个任务通过execute(Runnable)方法欲添加到线程池时： 
#如果此时线程池中的数量小于corePoolSize，即使线程池中的线程都处于空闲状态，也要创建新的线程来处理被添加的任务。 
#如果此时线程池中的数量等于 corePoolSize，但是缓冲队列 workQueue未满，那么任务被放入缓冲队列。 
#如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量小于maximumPoolSize，建新的线程来处理被添加的任务。 
#如果此时线程池中的数量大于corePoolSize，缓冲队列workQueue满，并且线程池中的数量等于maximumPoolSize，那么通过 handler所指定的策略来处理此任务。
#也就是：处理任务的优先级为：核心线程corePoolSize、任务队列workQueue、最大线程 maximumPoolSize，如果三者都满了，使用handler处理被拒绝的任务。 
#当线程池中的线程数量大于 corePoolSize时，如果某线程空闲时间超过keepAliveTime，线程将被终止。这样，线程池可以动态的调整池中的线程数。

#线程池维护线程的最少数量
taskExecutor.corePoolSize=20
#线程池维护线程所允许的空闲时间
taskExecutor.keepAliveSeconds=200
#线程池维护线程的最大数量
taskExecutor.maxPoolSize=100
#线程池所使用的缓冲队列
taskExecutor.queueCapacity=25

#线程池维护线程的最少数量
c2taskExecutor.corePoolSize=3
#线程池维护线程所允许的空闲时间
c2taskExecutor.keepAliveSeconds=200
#线程池维护线程的最大数量
c2taskExecutor.maxPoolSize=20
#线程池所使用的缓冲队列
c2taskExecutor.queueCapacity=10